// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/timdrysdale/interval/internal/client/models"
)

// SetLockReader is a Reader for the SetLock structure.
type SetLockReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetLockReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetLockOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSetLockUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetLockNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSetLockInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSetLockOK creates a SetLockOK with default headers values
func NewSetLockOK() *SetLockOK {
	return &SetLockOK{}
}

/* SetLockOK describes a response with status code 200, with default header values.

OK
*/
type SetLockOK struct {
	Payload *models.StoreStatusAdmin
}

// IsSuccess returns true when this set lock o k response has a 2xx status code
func (o *SetLockOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set lock o k response has a 3xx status code
func (o *SetLockOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set lock o k response has a 4xx status code
func (o *SetLockOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this set lock o k response has a 5xx status code
func (o *SetLockOK) IsServerError() bool {
	return false
}

// IsCode returns true when this set lock o k response a status code equal to that given
func (o *SetLockOK) IsCode(code int) bool {
	return code == 200
}

func (o *SetLockOK) Error() string {
	return fmt.Sprintf("[PUT /admin/status][%d] setLockOK  %+v", 200, o.Payload)
}

func (o *SetLockOK) String() string {
	return fmt.Sprintf("[PUT /admin/status][%d] setLockOK  %+v", 200, o.Payload)
}

func (o *SetLockOK) GetPayload() *models.StoreStatusAdmin {
	return o.Payload
}

func (o *SetLockOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StoreStatusAdmin)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetLockUnauthorized creates a SetLockUnauthorized with default headers values
func NewSetLockUnauthorized() *SetLockUnauthorized {
	return &SetLockUnauthorized{}
}

/* SetLockUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SetLockUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this set lock unauthorized response has a 2xx status code
func (o *SetLockUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set lock unauthorized response has a 3xx status code
func (o *SetLockUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set lock unauthorized response has a 4xx status code
func (o *SetLockUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this set lock unauthorized response has a 5xx status code
func (o *SetLockUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this set lock unauthorized response a status code equal to that given
func (o *SetLockUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SetLockUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /admin/status][%d] setLockUnauthorized  %+v", 401, o.Payload)
}

func (o *SetLockUnauthorized) String() string {
	return fmt.Sprintf("[PUT /admin/status][%d] setLockUnauthorized  %+v", 401, o.Payload)
}

func (o *SetLockUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetLockUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetLockNotFound creates a SetLockNotFound with default headers values
func NewSetLockNotFound() *SetLockNotFound {
	return &SetLockNotFound{}
}

/* SetLockNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type SetLockNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this set lock not found response has a 2xx status code
func (o *SetLockNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set lock not found response has a 3xx status code
func (o *SetLockNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set lock not found response has a 4xx status code
func (o *SetLockNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this set lock not found response has a 5xx status code
func (o *SetLockNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this set lock not found response a status code equal to that given
func (o *SetLockNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SetLockNotFound) Error() string {
	return fmt.Sprintf("[PUT /admin/status][%d] setLockNotFound  %+v", 404, o.Payload)
}

func (o *SetLockNotFound) String() string {
	return fmt.Sprintf("[PUT /admin/status][%d] setLockNotFound  %+v", 404, o.Payload)
}

func (o *SetLockNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetLockNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetLockInternalServerError creates a SetLockInternalServerError with default headers values
func NewSetLockInternalServerError() *SetLockInternalServerError {
	return &SetLockInternalServerError{}
}

/* SetLockInternalServerError describes a response with status code 500, with default header values.

Internal Error
*/
type SetLockInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this set lock internal server error response has a 2xx status code
func (o *SetLockInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set lock internal server error response has a 3xx status code
func (o *SetLockInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set lock internal server error response has a 4xx status code
func (o *SetLockInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this set lock internal server error response has a 5xx status code
func (o *SetLockInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this set lock internal server error response a status code equal to that given
func (o *SetLockInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SetLockInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /admin/status][%d] setLockInternalServerError  %+v", 500, o.Payload)
}

func (o *SetLockInternalServerError) String() string {
	return fmt.Sprintf("[PUT /admin/status][%d] setLockInternalServerError  %+v", 500, o.Payload)
}

func (o *SetLockInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetLockInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
