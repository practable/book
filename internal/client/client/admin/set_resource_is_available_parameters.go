// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSetResourceIsAvailableParams creates a new SetResourceIsAvailableParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSetResourceIsAvailableParams() *SetResourceIsAvailableParams {
	return &SetResourceIsAvailableParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSetResourceIsAvailableParamsWithTimeout creates a new SetResourceIsAvailableParams object
// with the ability to set a timeout on a request.
func NewSetResourceIsAvailableParamsWithTimeout(timeout time.Duration) *SetResourceIsAvailableParams {
	return &SetResourceIsAvailableParams{
		timeout: timeout,
	}
}

// NewSetResourceIsAvailableParamsWithContext creates a new SetResourceIsAvailableParams object
// with the ability to set a context for a request.
func NewSetResourceIsAvailableParamsWithContext(ctx context.Context) *SetResourceIsAvailableParams {
	return &SetResourceIsAvailableParams{
		Context: ctx,
	}
}

// NewSetResourceIsAvailableParamsWithHTTPClient creates a new SetResourceIsAvailableParams object
// with the ability to set a custom HTTPClient for a request.
func NewSetResourceIsAvailableParamsWithHTTPClient(client *http.Client) *SetResourceIsAvailableParams {
	return &SetResourceIsAvailableParams{
		HTTPClient: client,
	}
}

/* SetResourceIsAvailableParams contains all the parameters to send to the API endpoint
   for the set resource is available operation.

   Typically these are written to a http.Request.
*/
type SetResourceIsAvailableParams struct {

	// Available.
	Available bool

	// Reason.
	Reason string

	// ResourceName.
	ResourceName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the set resource is available params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SetResourceIsAvailableParams) WithDefaults() *SetResourceIsAvailableParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the set resource is available params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SetResourceIsAvailableParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the set resource is available params
func (o *SetResourceIsAvailableParams) WithTimeout(timeout time.Duration) *SetResourceIsAvailableParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set resource is available params
func (o *SetResourceIsAvailableParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set resource is available params
func (o *SetResourceIsAvailableParams) WithContext(ctx context.Context) *SetResourceIsAvailableParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set resource is available params
func (o *SetResourceIsAvailableParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set resource is available params
func (o *SetResourceIsAvailableParams) WithHTTPClient(client *http.Client) *SetResourceIsAvailableParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set resource is available params
func (o *SetResourceIsAvailableParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAvailable adds the available to the set resource is available params
func (o *SetResourceIsAvailableParams) WithAvailable(available bool) *SetResourceIsAvailableParams {
	o.SetAvailable(available)
	return o
}

// SetAvailable adds the available to the set resource is available params
func (o *SetResourceIsAvailableParams) SetAvailable(available bool) {
	o.Available = available
}

// WithReason adds the reason to the set resource is available params
func (o *SetResourceIsAvailableParams) WithReason(reason string) *SetResourceIsAvailableParams {
	o.SetReason(reason)
	return o
}

// SetReason adds the reason to the set resource is available params
func (o *SetResourceIsAvailableParams) SetReason(reason string) {
	o.Reason = reason
}

// WithResourceName adds the resourceName to the set resource is available params
func (o *SetResourceIsAvailableParams) WithResourceName(resourceName string) *SetResourceIsAvailableParams {
	o.SetResourceName(resourceName)
	return o
}

// SetResourceName adds the resourceName to the set resource is available params
func (o *SetResourceIsAvailableParams) SetResourceName(resourceName string) {
	o.ResourceName = resourceName
}

// WriteToRequest writes these params to a swagger request
func (o *SetResourceIsAvailableParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param available
	qrAvailable := o.Available
	qAvailable := swag.FormatBool(qrAvailable)
	if qAvailable != "" {

		if err := r.SetQueryParam("available", qAvailable); err != nil {
			return err
		}
	}

	// query param reason
	qrReason := o.Reason
	qReason := qrReason
	if qReason != "" {

		if err := r.SetQueryParam("reason", qReason); err != nil {
			return err
		}
	}

	// path param resource_name
	if err := r.SetPathParam("resource_name", o.ResourceName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
