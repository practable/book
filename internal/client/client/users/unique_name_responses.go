// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/timdrysdale/interval/internal/client/models"
)

// UniqueNameReader is a Reader for the UniqueName structure.
type UniqueNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UniqueNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUniqueNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUniqueNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUniqueNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUniqueNameOK creates a UniqueNameOK with default headers values
func NewUniqueNameOK() *UniqueNameOK {
	return &UniqueNameOK{}
}

/* UniqueNameOK describes a response with status code 200, with default header values.

OK
*/
type UniqueNameOK struct {
	Payload *models.UserName
}

// IsSuccess returns true when this unique name o k response has a 2xx status code
func (o *UniqueNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this unique name o k response has a 3xx status code
func (o *UniqueNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unique name o k response has a 4xx status code
func (o *UniqueNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this unique name o k response has a 5xx status code
func (o *UniqueNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this unique name o k response a status code equal to that given
func (o *UniqueNameOK) IsCode(code int) bool {
	return code == 200
}

func (o *UniqueNameOK) Error() string {
	return fmt.Sprintf("[POST /users/unique][%d] uniqueNameOK  %+v", 200, o.Payload)
}

func (o *UniqueNameOK) String() string {
	return fmt.Sprintf("[POST /users/unique][%d] uniqueNameOK  %+v", 200, o.Payload)
}

func (o *UniqueNameOK) GetPayload() *models.UserName {
	return o.Payload
}

func (o *UniqueNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserName)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUniqueNameUnauthorized creates a UniqueNameUnauthorized with default headers values
func NewUniqueNameUnauthorized() *UniqueNameUnauthorized {
	return &UniqueNameUnauthorized{}
}

/* UniqueNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UniqueNameUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this unique name unauthorized response has a 2xx status code
func (o *UniqueNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unique name unauthorized response has a 3xx status code
func (o *UniqueNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unique name unauthorized response has a 4xx status code
func (o *UniqueNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this unique name unauthorized response has a 5xx status code
func (o *UniqueNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this unique name unauthorized response a status code equal to that given
func (o *UniqueNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UniqueNameUnauthorized) Error() string {
	return fmt.Sprintf("[POST /users/unique][%d] uniqueNameUnauthorized  %+v", 401, o.Payload)
}

func (o *UniqueNameUnauthorized) String() string {
	return fmt.Sprintf("[POST /users/unique][%d] uniqueNameUnauthorized  %+v", 401, o.Payload)
}

func (o *UniqueNameUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UniqueNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUniqueNameInternalServerError creates a UniqueNameInternalServerError with default headers values
func NewUniqueNameInternalServerError() *UniqueNameInternalServerError {
	return &UniqueNameInternalServerError{}
}

/* UniqueNameInternalServerError describes a response with status code 500, with default header values.

Internal Error
*/
type UniqueNameInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this unique name internal server error response has a 2xx status code
func (o *UniqueNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unique name internal server error response has a 3xx status code
func (o *UniqueNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unique name internal server error response has a 4xx status code
func (o *UniqueNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this unique name internal server error response has a 5xx status code
func (o *UniqueNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this unique name internal server error response a status code equal to that given
func (o *UniqueNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UniqueNameInternalServerError) Error() string {
	return fmt.Sprintf("[POST /users/unique][%d] uniqueNameInternalServerError  %+v", 500, o.Payload)
}

func (o *UniqueNameInternalServerError) String() string {
	return fmt.Sprintf("[POST /users/unique][%d] uniqueNameInternalServerError  %+v", 500, o.Payload)
}

func (o *UniqueNameInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UniqueNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
