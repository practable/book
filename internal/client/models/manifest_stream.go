// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ManifestStream manifest stream
//
// represents a prototype stream as described in manifest
//
// swagger:model ManifestStream
type ManifestStream struct {

	// connection type
	// Required: true
	ConnectionType *string `json:"connection_type"`

	// Describes the stream, and doubles as template key in the URL
	// Example: video
	// Required: true
	For *string `json:"for"`

	// scopes
	// Required: true
	Scopes []string `json:"scopes"`

	// topic
	// Required: true
	Topic *string `json:"topic"`

	// URL at which to obtain access to the stream (getting a redirect URL containing a one time code)
	// Example: https://relay-access.practable.io/session/abc123
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this manifest stream
func (m *ManifestStream) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManifestStream) validateConnectionType(formats strfmt.Registry) error {

	if err := validate.Required("connection_type", "body", m.ConnectionType); err != nil {
		return err
	}

	return nil
}

func (m *ManifestStream) validateFor(formats strfmt.Registry) error {

	if err := validate.Required("for", "body", m.For); err != nil {
		return err
	}

	return nil
}

func (m *ManifestStream) validateScopes(formats strfmt.Registry) error {

	if err := validate.Required("scopes", "body", m.Scopes); err != nil {
		return err
	}

	return nil
}

func (m *ManifestStream) validateTopic(formats strfmt.Registry) error {

	if err := validate.Required("topic", "body", m.Topic); err != nil {
		return err
	}

	return nil
}

func (m *ManifestStream) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this manifest stream based on context it is used
func (m *ManifestStream) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ManifestStream) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ManifestStream) UnmarshalBinary(b []byte) error {
	var res ManifestStream
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
