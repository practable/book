// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/practable/book/internal/serve/models"
)

// AddGroupForUserNoContentCode is the HTTP code returned for type AddGroupForUserNoContent
const AddGroupForUserNoContentCode int = 204

/*AddGroupForUserNoContent OK - No Content

swagger:response addGroupForUserNoContent
*/
type AddGroupForUserNoContent struct {
}

// NewAddGroupForUserNoContent creates AddGroupForUserNoContent with default headers values
func NewAddGroupForUserNoContent() *AddGroupForUserNoContent {

	return &AddGroupForUserNoContent{}
}

// WriteResponse to the client
func (o *AddGroupForUserNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// AddGroupForUserUnauthorizedCode is the HTTP code returned for type AddGroupForUserUnauthorized
const AddGroupForUserUnauthorizedCode int = 401

/*AddGroupForUserUnauthorized Unauthorized

swagger:response addGroupForUserUnauthorized
*/
type AddGroupForUserUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddGroupForUserUnauthorized creates AddGroupForUserUnauthorized with default headers values
func NewAddGroupForUserUnauthorized() *AddGroupForUserUnauthorized {

	return &AddGroupForUserUnauthorized{}
}

// WithPayload adds the payload to the add group for user unauthorized response
func (o *AddGroupForUserUnauthorized) WithPayload(payload *models.Error) *AddGroupForUserUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add group for user unauthorized response
func (o *AddGroupForUserUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddGroupForUserUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddGroupForUserNotFoundCode is the HTTP code returned for type AddGroupForUserNotFound
const AddGroupForUserNotFoundCode int = 404

/*AddGroupForUserNotFound The specified resource was not found

swagger:response addGroupForUserNotFound
*/
type AddGroupForUserNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddGroupForUserNotFound creates AddGroupForUserNotFound with default headers values
func NewAddGroupForUserNotFound() *AddGroupForUserNotFound {

	return &AddGroupForUserNotFound{}
}

// WithPayload adds the payload to the add group for user not found response
func (o *AddGroupForUserNotFound) WithPayload(payload *models.Error) *AddGroupForUserNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add group for user not found response
func (o *AddGroupForUserNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddGroupForUserNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddGroupForUserInternalServerErrorCode is the HTTP code returned for type AddGroupForUserInternalServerError
const AddGroupForUserInternalServerErrorCode int = 500

/*AddGroupForUserInternalServerError Internal Error

swagger:response addGroupForUserInternalServerError
*/
type AddGroupForUserInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddGroupForUserInternalServerError creates AddGroupForUserInternalServerError with default headers values
func NewAddGroupForUserInternalServerError() *AddGroupForUserInternalServerError {

	return &AddGroupForUserInternalServerError{}
}

// WithPayload adds the payload to the add group for user internal server error response
func (o *AddGroupForUserInternalServerError) WithPayload(payload *models.Error) *AddGroupForUserInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add group for user internal server error response
func (o *AddGroupForUserInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddGroupForUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
