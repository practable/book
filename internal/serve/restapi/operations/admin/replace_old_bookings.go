// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReplaceOldBookingsHandlerFunc turns a function with the right signature into a replace old bookings handler
type ReplaceOldBookingsHandlerFunc func(ReplaceOldBookingsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplaceOldBookingsHandlerFunc) Handle(params ReplaceOldBookingsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ReplaceOldBookingsHandler interface for that can handle valid replace old bookings params
type ReplaceOldBookingsHandler interface {
	Handle(ReplaceOldBookingsParams, interface{}) middleware.Responder
}

// NewReplaceOldBookings creates a new http.Handler for the replace old bookings operation
func NewReplaceOldBookings(ctx *middleware.Context, handler ReplaceOldBookingsHandler) *ReplaceOldBookings {
	return &ReplaceOldBookings{Context: ctx, Handler: handler}
}

/*
	ReplaceOldBookings swagger:route PUT /admin/oldbookings admin replaceOldBookings

# Replace old bookings

Deletes all old bookings, and all users, then replaces both according to the bookings in the request, i.e. users and their usage are created as required to match bookings.
*/
type ReplaceOldBookings struct {
	Context *middleware.Context
	Handler ReplaceOldBookingsHandler
}

func (o *ReplaceOldBookings) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewReplaceOldBookingsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
