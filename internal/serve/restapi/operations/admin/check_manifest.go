// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CheckManifestHandlerFunc turns a function with the right signature into a check manifest handler
type CheckManifestHandlerFunc func(CheckManifestParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckManifestHandlerFunc) Handle(params CheckManifestParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CheckManifestHandler interface for that can handle valid check manifest params
type CheckManifestHandler interface {
	Handle(CheckManifestParams, interface{}) middleware.Responder
}

// NewCheckManifest creates a new http.Handler for the check manifest operation
func NewCheckManifest(ctx *middleware.Context, handler CheckManifestHandler) *CheckManifest {
	return &CheckManifest{Context: ctx, Handler: handler}
}

/* CheckManifest swagger:route GET /admin/manifest/check admin checkManifest

Check a manifest

Check a manifest for errors. Returns 204 if OK or, if not, returns 500 with a list of error(s).

*/
type CheckManifest struct {
	Context *middleware.Context
	Handler CheckManifestHandler
}

func (o *CheckManifest) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCheckManifestParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
