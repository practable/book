// Code generated by go-swagger; DO NOT EDIT.

package descriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetDescriptionHandlerFunc turns a function with the right signature into a get description handler
type GetDescriptionHandlerFunc func(GetDescriptionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDescriptionHandlerFunc) Handle(params GetDescriptionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetDescriptionHandler interface for that can handle valid get description params
type GetDescriptionHandler interface {
	Handle(GetDescriptionParams, interface{}) middleware.Responder
}

// NewGetDescription creates a new http.Handler for the get description operation
func NewGetDescription(ctx *middleware.Context, handler GetDescriptionHandler) *GetDescription {
	return &GetDescription{Context: ctx, Handler: handler}
}

/* GetDescription swagger:route GET /descriptions/{description_name} descriptions getDescription

Get description

Get description

*/
type GetDescription struct {
	Context *middleware.Context
	Handler GetDescriptionHandler
}

func (o *GetDescription) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetDescriptionParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
