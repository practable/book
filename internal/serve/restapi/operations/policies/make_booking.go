// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// MakeBookingHandlerFunc turns a function with the right signature into a make booking handler
type MakeBookingHandlerFunc func(MakeBookingParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn MakeBookingHandlerFunc) Handle(params MakeBookingParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// MakeBookingHandler interface for that can handle valid make booking params
type MakeBookingHandler interface {
	Handle(MakeBookingParams, interface{}) middleware.Responder
}

// NewMakeBooking creates a new http.Handler for the make booking operation
func NewMakeBooking(ctx *middleware.Context, handler MakeBookingHandler) *MakeBooking {
	return &MakeBooking{Context: ctx, Handler: handler}
}

/* MakeBooking swagger:route POST /policies/{policy_name}/slots/{slot_name} policies makeBooking

Request a booking

TODO pagination

*/
type MakeBooking struct {
	Context *middleware.Context
	Handler MakeBookingHandler
}

func (o *MakeBooking) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewMakeBookingParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
