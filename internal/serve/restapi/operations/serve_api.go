// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/timdrysdale/interval/internal/serve/restapi/operations/admin"
	"github.com/timdrysdale/interval/internal/serve/restapi/operations/users"
)

// NewServeAPI creates a new Serve instance
func NewServeAPI(spec *loads.Document) *ServeAPI {
	return &ServeAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),
		TxtConsumer:  runtime.TextConsumer(),

		JSONProducer: runtime.JSONProducer(),
		TxtProducer:  runtime.TextProducer(),

		UsersAddPolicyForUserHandler: users.AddPolicyForUserHandlerFunc(func(params users.AddPolicyForUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.AddPolicyForUser has not yet been implemented")
		}),
		UsersCancelBookingHandler: users.CancelBookingHandlerFunc(func(params users.CancelBookingParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.CancelBooking has not yet been implemented")
		}),
		AdminCheckManifestHandler: admin.CheckManifestHandlerFunc(func(params admin.CheckManifestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.CheckManifest has not yet been implemented")
		}),
		AdminExportBookingsHandler: admin.ExportBookingsHandlerFunc(func(params admin.ExportBookingsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.ExportBookings has not yet been implemented")
		}),
		AdminExportManifestHandler: admin.ExportManifestHandlerFunc(func(params admin.ExportManifestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.ExportManifest has not yet been implemented")
		}),
		AdminExportOldBookingsHandler: admin.ExportOldBookingsHandlerFunc(func(params admin.ExportOldBookingsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.ExportOldBookings has not yet been implemented")
		}),
		AdminExportUsersHandler: admin.ExportUsersHandlerFunc(func(params admin.ExportUsersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.ExportUsers has not yet been implemented")
		}),
		UsersGetAccessTokenHandler: users.GetAccessTokenHandlerFunc(func(params users.GetAccessTokenParams) middleware.Responder {
			return middleware.NotImplemented("operation users.GetAccessToken has not yet been implemented")
		}),
		UsersGetActivityHandler: users.GetActivityHandlerFunc(func(params users.GetActivityParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetActivity has not yet been implemented")
		}),
		UsersGetAvailabilityHandler: users.GetAvailabilityHandlerFunc(func(params users.GetAvailabilityParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetAvailability has not yet been implemented")
		}),
		UsersGetBookingsForUserHandler: users.GetBookingsForUserHandlerFunc(func(params users.GetBookingsForUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetBookingsForUser has not yet been implemented")
		}),
		UsersGetDescriptionHandler: users.GetDescriptionHandlerFunc(func(params users.GetDescriptionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetDescription has not yet been implemented")
		}),
		UsersGetOldBookingsForUserHandler: users.GetOldBookingsForUserHandlerFunc(func(params users.GetOldBookingsForUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetOldBookingsForUser has not yet been implemented")
		}),
		UsersGetPoliciesForUserHandler: users.GetPoliciesForUserHandlerFunc(func(params users.GetPoliciesForUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetPoliciesForUser has not yet been implemented")
		}),
		UsersGetPolicyHandler: users.GetPolicyHandlerFunc(func(params users.GetPolicyParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetPolicy has not yet been implemented")
		}),
		UsersGetPolicyStatusForUserHandler: users.GetPolicyStatusForUserHandlerFunc(func(params users.GetPolicyStatusForUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetPolicyStatusForUser has not yet been implemented")
		}),
		AdminGetSlotIsAvailableHandler: admin.GetSlotIsAvailableHandlerFunc(func(params admin.GetSlotIsAvailableParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.GetSlotIsAvailable has not yet been implemented")
		}),
		UsersMakeBookingHandler: users.MakeBookingHandlerFunc(func(params users.MakeBookingParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.MakeBooking has not yet been implemented")
		}),
		AdminReplaceBookingsHandler: admin.ReplaceBookingsHandlerFunc(func(params admin.ReplaceBookingsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.ReplaceBookings has not yet been implemented")
		}),
		AdminReplaceManifestHandler: admin.ReplaceManifestHandlerFunc(func(params admin.ReplaceManifestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.ReplaceManifest has not yet been implemented")
		}),
		AdminReplaceOldBookingsHandler: admin.ReplaceOldBookingsHandlerFunc(func(params admin.ReplaceOldBookingsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.ReplaceOldBookings has not yet been implemented")
		}),
		AdminSetSlotIsAvailableHandler: admin.SetSlotIsAvailableHandlerFunc(func(params admin.SetSlotIsAvailableParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.SetSlotIsAvailable has not yet been implemented")
		}),
		UsersUniqueNameHandler: users.UniqueNameHandlerFunc(func(params users.UniqueNameParams) middleware.Responder {
			return middleware.NotImplemented("operation users.UniqueName has not yet been implemented")
		}),
		AdminGetStoreStatusAdminHandler: admin.GetStoreStatusAdminHandlerFunc(func(params admin.GetStoreStatusAdminParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.GetStoreStatusAdmin has not yet been implemented")
		}),
		UsersGetStoreStatusUserHandler: users.GetStoreStatusUserHandlerFunc(func(params users.GetStoreStatusUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetStoreStatusUser has not yet been implemented")
		}),
		AdminSetLockHandler: admin.SetLockHandlerFunc(func(params admin.SetLockParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.SetLock has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		BearerAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (Bearer) Authorization from header param [Authorization] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*ServeAPI User API for booking slots in advance */
type ServeAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// TxtConsumer registers a consumer for the following mime types:
	//   - text/plain
	TxtConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer
	// TxtProducer registers a producer for the following mime types:
	//   - text/plain
	TxtProducer runtime.Producer

	// BearerAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	BearerAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// UsersAddPolicyForUserHandler sets the operation handler for the add policy for user operation
	UsersAddPolicyForUserHandler users.AddPolicyForUserHandler
	// UsersCancelBookingHandler sets the operation handler for the cancel booking operation
	UsersCancelBookingHandler users.CancelBookingHandler
	// AdminCheckManifestHandler sets the operation handler for the check manifest operation
	AdminCheckManifestHandler admin.CheckManifestHandler
	// AdminExportBookingsHandler sets the operation handler for the export bookings operation
	AdminExportBookingsHandler admin.ExportBookingsHandler
	// AdminExportManifestHandler sets the operation handler for the export manifest operation
	AdminExportManifestHandler admin.ExportManifestHandler
	// AdminExportOldBookingsHandler sets the operation handler for the export old bookings operation
	AdminExportOldBookingsHandler admin.ExportOldBookingsHandler
	// AdminExportUsersHandler sets the operation handler for the export users operation
	AdminExportUsersHandler admin.ExportUsersHandler
	// UsersGetAccessTokenHandler sets the operation handler for the get access token operation
	UsersGetAccessTokenHandler users.GetAccessTokenHandler
	// UsersGetActivityHandler sets the operation handler for the get activity operation
	UsersGetActivityHandler users.GetActivityHandler
	// UsersGetAvailabilityHandler sets the operation handler for the get availability operation
	UsersGetAvailabilityHandler users.GetAvailabilityHandler
	// UsersGetBookingsForUserHandler sets the operation handler for the get bookings for user operation
	UsersGetBookingsForUserHandler users.GetBookingsForUserHandler
	// UsersGetDescriptionHandler sets the operation handler for the get description operation
	UsersGetDescriptionHandler users.GetDescriptionHandler
	// UsersGetOldBookingsForUserHandler sets the operation handler for the get old bookings for user operation
	UsersGetOldBookingsForUserHandler users.GetOldBookingsForUserHandler
	// UsersGetPoliciesForUserHandler sets the operation handler for the get policies for user operation
	UsersGetPoliciesForUserHandler users.GetPoliciesForUserHandler
	// UsersGetPolicyHandler sets the operation handler for the get policy operation
	UsersGetPolicyHandler users.GetPolicyHandler
	// UsersGetPolicyStatusForUserHandler sets the operation handler for the get policy status for user operation
	UsersGetPolicyStatusForUserHandler users.GetPolicyStatusForUserHandler
	// AdminGetSlotIsAvailableHandler sets the operation handler for the get slot is available operation
	AdminGetSlotIsAvailableHandler admin.GetSlotIsAvailableHandler
	// UsersMakeBookingHandler sets the operation handler for the make booking operation
	UsersMakeBookingHandler users.MakeBookingHandler
	// AdminReplaceBookingsHandler sets the operation handler for the replace bookings operation
	AdminReplaceBookingsHandler admin.ReplaceBookingsHandler
	// AdminReplaceManifestHandler sets the operation handler for the replace manifest operation
	AdminReplaceManifestHandler admin.ReplaceManifestHandler
	// AdminReplaceOldBookingsHandler sets the operation handler for the replace old bookings operation
	AdminReplaceOldBookingsHandler admin.ReplaceOldBookingsHandler
	// AdminSetSlotIsAvailableHandler sets the operation handler for the set slot is available operation
	AdminSetSlotIsAvailableHandler admin.SetSlotIsAvailableHandler
	// UsersUniqueNameHandler sets the operation handler for the unique name operation
	UsersUniqueNameHandler users.UniqueNameHandler
	// AdminGetStoreStatusAdminHandler sets the operation handler for the get store status admin operation
	AdminGetStoreStatusAdminHandler admin.GetStoreStatusAdminHandler
	// UsersGetStoreStatusUserHandler sets the operation handler for the get store status user operation
	UsersGetStoreStatusUserHandler users.GetStoreStatusUserHandler
	// AdminSetLockHandler sets the operation handler for the set lock operation
	AdminSetLockHandler admin.SetLockHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *ServeAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *ServeAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *ServeAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ServeAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ServeAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ServeAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ServeAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ServeAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ServeAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ServeAPI
func (o *ServeAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.TxtConsumer == nil {
		unregistered = append(unregistered, "TxtConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}
	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.BearerAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.UsersAddPolicyForUserHandler == nil {
		unregistered = append(unregistered, "users.AddPolicyForUserHandler")
	}
	if o.UsersCancelBookingHandler == nil {
		unregistered = append(unregistered, "users.CancelBookingHandler")
	}
	if o.AdminCheckManifestHandler == nil {
		unregistered = append(unregistered, "admin.CheckManifestHandler")
	}
	if o.AdminExportBookingsHandler == nil {
		unregistered = append(unregistered, "admin.ExportBookingsHandler")
	}
	if o.AdminExportManifestHandler == nil {
		unregistered = append(unregistered, "admin.ExportManifestHandler")
	}
	if o.AdminExportOldBookingsHandler == nil {
		unregistered = append(unregistered, "admin.ExportOldBookingsHandler")
	}
	if o.AdminExportUsersHandler == nil {
		unregistered = append(unregistered, "admin.ExportUsersHandler")
	}
	if o.UsersGetAccessTokenHandler == nil {
		unregistered = append(unregistered, "users.GetAccessTokenHandler")
	}
	if o.UsersGetActivityHandler == nil {
		unregistered = append(unregistered, "users.GetActivityHandler")
	}
	if o.UsersGetAvailabilityHandler == nil {
		unregistered = append(unregistered, "users.GetAvailabilityHandler")
	}
	if o.UsersGetBookingsForUserHandler == nil {
		unregistered = append(unregistered, "users.GetBookingsForUserHandler")
	}
	if o.UsersGetDescriptionHandler == nil {
		unregistered = append(unregistered, "users.GetDescriptionHandler")
	}
	if o.UsersGetOldBookingsForUserHandler == nil {
		unregistered = append(unregistered, "users.GetOldBookingsForUserHandler")
	}
	if o.UsersGetPoliciesForUserHandler == nil {
		unregistered = append(unregistered, "users.GetPoliciesForUserHandler")
	}
	if o.UsersGetPolicyHandler == nil {
		unregistered = append(unregistered, "users.GetPolicyHandler")
	}
	if o.UsersGetPolicyStatusForUserHandler == nil {
		unregistered = append(unregistered, "users.GetPolicyStatusForUserHandler")
	}
	if o.AdminGetSlotIsAvailableHandler == nil {
		unregistered = append(unregistered, "admin.GetSlotIsAvailableHandler")
	}
	if o.UsersMakeBookingHandler == nil {
		unregistered = append(unregistered, "users.MakeBookingHandler")
	}
	if o.AdminReplaceBookingsHandler == nil {
		unregistered = append(unregistered, "admin.ReplaceBookingsHandler")
	}
	if o.AdminReplaceManifestHandler == nil {
		unregistered = append(unregistered, "admin.ReplaceManifestHandler")
	}
	if o.AdminReplaceOldBookingsHandler == nil {
		unregistered = append(unregistered, "admin.ReplaceOldBookingsHandler")
	}
	if o.AdminSetSlotIsAvailableHandler == nil {
		unregistered = append(unregistered, "admin.SetSlotIsAvailableHandler")
	}
	if o.UsersUniqueNameHandler == nil {
		unregistered = append(unregistered, "users.UniqueNameHandler")
	}
	if o.AdminGetStoreStatusAdminHandler == nil {
		unregistered = append(unregistered, "admin.GetStoreStatusAdminHandler")
	}
	if o.UsersGetStoreStatusUserHandler == nil {
		unregistered = append(unregistered, "users.GetStoreStatusUserHandler")
	}
	if o.AdminSetLockHandler == nil {
		unregistered = append(unregistered, "admin.SetLockHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ServeAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ServeAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "Bearer":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.BearerAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *ServeAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *ServeAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "text/plain":
			result["text/plain"] = o.TxtConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *ServeAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		case "text/plain":
			result["text/plain"] = o.TxtProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ServeAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the serve API
func (o *ServeAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ServeAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{user_name}/policies/{policy_name}"] = users.NewAddPolicyForUser(o.context, o.UsersAddPolicyForUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{user_name}/bookings/{booking_name}"] = users.NewCancelBooking(o.context, o.UsersCancelBookingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/manifest/check"] = admin.NewCheckManifest(o.context, o.AdminCheckManifestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/bookings"] = admin.NewExportBookings(o.context, o.AdminExportBookingsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/manifest"] = admin.NewExportManifest(o.context, o.AdminExportManifestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/oldbookings"] = admin.NewExportOldBookings(o.context, o.AdminExportOldBookingsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/users"] = admin.NewExportUsers(o.context, o.AdminExportUsersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/login/{user_name}"] = users.NewGetAccessToken(o.context, o.UsersGetAccessTokenHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{user_name}/bookings/{booking_name}"] = users.NewGetActivity(o.context, o.UsersGetActivityHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/policies/{policy_name}/slots/{slot_name}"] = users.NewGetAvailability(o.context, o.UsersGetAvailabilityHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{user_name}/bookings"] = users.NewGetBookingsForUser(o.context, o.UsersGetBookingsForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/descriptions/{description_name}"] = users.NewGetDescription(o.context, o.UsersGetDescriptionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{user_name}/oldbookings"] = users.NewGetOldBookingsForUser(o.context, o.UsersGetOldBookingsForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{user_name}/policies"] = users.NewGetPoliciesForUser(o.context, o.UsersGetPoliciesForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/policies/{policy_name}"] = users.NewGetPolicy(o.context, o.UsersGetPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{user_name}/policies/{policy_name}"] = users.NewGetPolicyStatusForUser(o.context, o.UsersGetPolicyStatusForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/slots/{slot_name}"] = admin.NewGetSlotIsAvailable(o.context, o.AdminGetSlotIsAvailableHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/policies/{policy_name}/slots/{slot_name}"] = users.NewMakeBooking(o.context, o.UsersMakeBookingHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/bookings"] = admin.NewReplaceBookings(o.context, o.AdminReplaceBookingsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/manifest"] = admin.NewReplaceManifest(o.context, o.AdminReplaceManifestHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/oldbookings"] = admin.NewReplaceOldBookings(o.context, o.AdminReplaceOldBookingsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/slots/{slot_name}"] = admin.NewSetSlotIsAvailable(o.context, o.AdminSetSlotIsAvailableHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/unique"] = users.NewUniqueName(o.context, o.UsersUniqueNameHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/status"] = admin.NewGetStoreStatusAdmin(o.context, o.AdminGetStoreStatusAdminHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/status"] = users.NewGetStoreStatusUser(o.context, o.UsersGetStoreStatusUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/status"] = admin.NewSetLock(o.context, o.AdminSetLockHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ServeAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ServeAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ServeAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ServeAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *ServeAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
