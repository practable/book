// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "text/plain"
  ],
  "produces": [
    "application/json",
    "text/plain"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "User API for booking slots in advance",
    "title": "AdvanceBooking",
    "contact": {
      "name": "Tim Drysdale",
      "url": "https://practable.io",
      "email": "timothy.d.drysdale@gmail.com"
    },
    "version": "0.2"
  },
  "host": "book.practable.io",
  "basePath": "/api/v1",
  "paths": {
    "/admin/bookings": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Exports a copy of the current bookings, with sufficient information to allow editing and replacement. If successful produces JSON-formatted bookings list.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Export a copy of all current bookings",
        "operationId": "ExportBookings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Bookings"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes all current bookings, refunds usage to users, and then replaces with current bookings. Existing users are retained, new users are created as required to match bookings.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Replace current bookings",
        "operationId": "ReplaceBookings",
        "parameters": [
          {
            "name": "bookings",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bookings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreStatusAdmin"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/admin/manifest": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Export the manifest (resources, slots, policies, descriptions etc). Does not include bookings or users",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Export the manifest",
        "operationId": "ExportManifest",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Manifest"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete the existing manifest and replace it with a new one. All items have specified names so bookings do not need updating (except perhaps you should if booked resources have been removed)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Replace the manifest",
        "operationId": "ReplaceManifest",
        "parameters": [
          {
            "name": "manifest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Manifest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreStatusAdmin"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/admin/manifest/check": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Check a manifest for errors. Returns 204 if OK or, if not, returns 500 with a list of error(s).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Check a manifest",
        "operationId": "CheckManifest",
        "parameters": [
          {
            "name": "manifest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Manifest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "description": "InternalError",
            "schema": {
              "$ref": "#/responses/ErrorList"
            }
          }
        }
      }
    },
    "/admin/oldbookings": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Exports a copy of the old bookings, with sufficient information to allow editing and replacement. If successful produces JSON-formatted bookings list.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Export a copy of all old bookings",
        "operationId": "ExportOldBookings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Bookings"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes all old bookings, and all users, then replaces both according to the bookings in the request, i.e. users and their usage are created as required to match bookings.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Replace old bookings",
        "operationId": "ReplaceOldBookings",
        "parameters": [
          {
            "name": "bookings",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bookings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreStatusAdmin"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/admin/slots/{slot_name}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Gets the availability of the underlying resource for the slot, including a status message. Indicates when equipment is offline temprorarily, e.g. due to failing an automated test.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get the availability of the slot",
        "operationId": "GetSlotIsAvailable",
        "parameters": [
          {
            "type": "string",
            "name": "slot_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SlotStatus"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Sets the availability of the underlying resource for the slot, including a status message. Used to prevent users accessing equipment that should not be used, e.g. after failing an automated test, or make it available again after fixing it.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Set the availability of the slot",
        "operationId": "SetSlotIsAvailable",
        "parameters": [
          {
            "type": "string",
            "name": "slot_name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "name": "available",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "reason",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/admin/status": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Gets a count of the number of elements in the store, e.g. Bookings, Descriptions etc to facilitate a necessary but not sufficient check that replace manifest and replace bookings have produced the correct results.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get current store status",
        "operationId": "getStoreStatusAdmin",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreStatusAdmin"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Set whether the booking system is locked for users",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "set/release booking lock",
        "operationId": "setLock",
        "parameters": [
          {
            "type": "boolean",
            "description": "set booking lock",
            "name": "lock",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "set message of the day (use query so it can be seen in server logs)",
            "name": "msg",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreStatusAdmin"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/admin/users": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Export bookings and usage data for each user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Export users",
        "operationId": "ExportUsers",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/descriptions/{description_name}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get description",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get description",
        "operationId": "GetDescription",
        "parameters": [
          {
            "type": "string",
            "name": "description_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Description"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/login/{user_name}": {
      "post": {
        "description": "The access token is required to authenticate requests to the rest of the user-facing API. Ideally access to this endpoint should be secured by the identity management system. The access token has a limited lifetime but can be re-requested as needed. Consider rate-limiting this per-connection.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Request a user access token",
        "operationId": "GetAccessToken",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/policies/{policy_name}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get policy",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get policy",
        "operationId": "GetPolicy",
        "parameters": [
          {
            "type": "string",
            "name": "policy_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyDescribed"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/policies/{policy_name}/slots/{slot_name}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Pagination is supported by the limit and offset parameters. For the first query '?limit=20\u0026offset=0', the second '?limit=20\u0026offset=20'. The offset is equal to the zero-indexed value of the first item of the next page to be returned (20 items are indexed from 0 to 19, so 20 is the first item to be returned in the second page). Note that drift can occur if slots are booked during the sending of availability data, potentially preventing a user from seeing some slots that move earlier in the index and cross a pagination boundary. Users should refresh their results from 0 offset on a regular-ish basis if they wish to avoid this.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get availability for the slot under the policy",
        "operationId": "GetAvailability",
        "parameters": [
          {
            "type": "string",
            "name": "policy_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "slot_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Intervals"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "A booking is requested for a specific combination of policy-slot-user-from-to. Users should check availability first, and only make requests that are likely to be granted. If there is no current availability then requests will be denied. If there is availability, there is still a chance another user requests the same slot just before - whichever request is received by the server first will be allowed, the other denied. The user_name must match the user_name the user logged in with, that is in the authorisation token in the header.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Request a booking",
        "operationId": "MakeBooking",
        "parameters": [
          {
            "type": "string",
            "name": "policy_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "slot_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "user_name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "name": "to",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Conflict - unavailable for the requested interval",
            "schema": {}
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/users/status": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Gets the current store status from a user perspective (e.g. is it locked? what is the reason?)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get current store status",
        "operationId": "getStoreStatusUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreStatusUser"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/users/{user_name}/bookings": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all current bookings for the user. It's assumed that no pagination will be required due to likely policy limits being a couple of bookings per policy and users typically having only a couple of policies. No pagination may cause issues for admins that book hundreds or thousands slots on behalf of students, although it is likely such bookings would be automated so no need to support rapid update of a GUI, at least for now.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get all current bookings for the user",
        "operationId": "GetBookingsForUser",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Bookings"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/users/{user_name}/bookings/{booking_name}": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Checks if the booking has started or not and if so, returns an activity that can be used to access the booked resource. Since this mutates the state of the booking (from unfulfilled to fulfilled) it is a put not a get.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Request the activity that goes with the booking",
        "operationId": "GetActivity",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "booking_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "For users to cancel their booking(s) on at a time. Checks if the booking is unstarted and/or unfulfilled, and cancels if so. A booking cannot be cancelled once an activity has been requested. A booking can be cancelled after it started, so long as it is unfulfilled (no activity requested). The user must be the owner of the booking to cancel it. Admins can cancel bookings by Lock() -\u003e ExportBookings() -\u003e edit -\u003e ReplaceBookings()-\u003e Unlock(). There is no need for an endpoint for admin single booking cancellation because the only visibility they have of bookings is via ExportBookings. Remaing time in the booking at time of cancellation is refunded to the user's usage tracker for that policy. That is intended to encourage early cancellation. Returns 404 on successful cancellation, or if there is no such booking.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Cancel the booking",
        "operationId": "CancelBooking",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "booking_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/users/{user_name}/oldbookings": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all old bookings for the user. It's assumed that no pagination will be required due to likely policy limits including usage limits and users typically having only a couple of policies, although in practice pagination may be useful for heavy users.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get all old bookings for the user",
        "operationId": "GetOldBookingsForUser",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Bookings"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/users/{user_name}/policies": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all current policies for user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get all current policies for user",
        "operationId": "GetPoliciesForUser",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PoliciesDescribed"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/users/{user_name}/policies/{policy_name}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get policy status for the user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get policy status",
        "operationId": "GetPolicyStatusForUser",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "policy_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyStatus"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Add policy to the list of policies with which this user is allowed to make bookings",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Add policy to user account",
        "operationId": "AddPolicyForUser",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "policy_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessToken": {
      "description": "intended use is for users to access the API, and is tied to their user_name.",
      "type": "object",
      "title": "access token",
      "required": [
        "token",
        "nbf",
        "exp",
        "aud",
        "sub",
        "scopes"
      ],
      "properties": {
        "aud": {
          "description": "Audience",
          "type": "string"
        },
        "exp": {
          "description": "Expires At",
          "type": "number",
          "format": "unix-timestamp"
        },
        "iat": {
          "description": "Issued At",
          "type": "number",
          "format": "unix-timestamp"
        },
        "nbf": {
          "description": "Not before",
          "type": "number",
          "format": "unix-timestamp"
        },
        "scopes": {
          "description": "List of scopes",
          "type": "array",
          "items": {
            "type": "string",
            "example": "user:booking"
          }
        },
        "sub": {
          "description": "Subject",
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "Activity": {
      "description": "An activity represents connection details to instances of pre-agreed resource types such as video, data streams and user interfaces.",
      "type": "object",
      "title": "activity",
      "required": [
        "description",
        "exp",
        "nbf",
        "streams",
        "uis"
      ],
      "properties": {
        "config": {
          "description": "URL at which to GET the configuration object",
          "type": "string",
          "format": "url",
          "example": "https://assets.practable.io/config/experiments/pvna/pvna01-0.0.json"
        },
        "description": {
          "$ref": "#/definitions/Description"
        },
        "exp": {
          "description": "Expires At",
          "type": "number",
          "format": "unix-timestamp"
        },
        "nbf": {
          "description": "Expires At",
          "type": "number",
          "format": "unix-timestamp"
        },
        "streams": {
          "description": "A list of streams",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityStream"
          }
        },
        "uis": {
          "description": "User interfaces",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UIDescribed"
          }
        }
      }
    },
    "ActivityStream": {
      "description": "Represents an assigned, valid booking slot for an individual piece of equipment",
      "type": "object",
      "title": "stream",
      "required": [
        "audience",
        "connection_type",
        "for",
        "scopes",
        "topic",
        "url"
      ],
      "properties": {
        "audience": {
          "type": "string"
        },
        "connection_type": {
          "type": "string"
        },
        "for": {
          "description": "Describes the stream, and doubles as template key in the URL",
          "type": "string",
          "example": "video"
        },
        "prefix": {
          "description": "prefix of the relay routing",
          "type": "string",
          "example": "session"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "token": {
          "description": "signed jwt token for accessing the stream",
          "type": "string"
        },
        "topic": {
          "type": "string"
        },
        "url": {
          "description": "URL at which to obtain access to the stream (getting a redirect URL containing a one time code)",
          "type": "string",
          "example": "https://relay-access.practable.io/session/abc123"
        }
      },
      "example": {
        "for": "video",
        "token": "ey....",
        "url": "https://relay-access.practable.io/session/abc123"
      }
    },
    "Booking": {
      "description": "A booking represents a promise to supply an activity. The booleans are not required because we don't process the booking status when loading old bookings (all old bookings are assumed to have been good bookings)",
      "type": "object",
      "title": "booking",
      "required": [
        "name",
        "policy",
        "slot",
        "user",
        "when"
      ],
      "properties": {
        "cancelled": {
          "description": "Has the booking been cancelled?",
          "type": "boolean"
        },
        "cancelled_at": {
          "description": "time the booking was cancelled",
          "type": "string",
          "format": "date-time"
        },
        "cancelled_by": {
          "description": "who cancelled the booking, e.g. auto-grace-expired, admin or user",
          "type": "string",
          "example": "auto-grace-expired"
        },
        "name": {
          "description": "unique name of the booking",
          "type": "string"
        },
        "policy": {
          "description": "policy under which the booking was made",
          "type": "string"
        },
        "slot": {
          "description": "name of the slot that has been booked",
          "type": "string"
        },
        "started": {
          "description": "has the booking been started by the user?",
          "type": "boolean"
        },
        "started_at": {
          "description": "time the booking was first started by the user",
          "type": "string",
          "format": "date-time"
        },
        "unfulfilled": {
          "description": "was the resource unavailable",
          "type": "boolean"
        },
        "usage_charged": {
          "description": "how much usage was actually charged for this booking",
          "type": "string"
        },
        "user": {
          "description": "name of the user who made the booking",
          "type": "string"
        },
        "when": {
          "$ref": "#/definitions/Interval"
        }
      }
    },
    "Bookings": {
      "description": "list of bookings",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Booking"
      }
    },
    "Description": {
      "description": "Description of a resource e.g. policy, slot, user interface",
      "type": "object",
      "title": "description",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "further": {
          "description": "URL for further information",
          "type": "string",
          "example": "https://static.practable.io/info/penduino/ui.html"
        },
        "image": {
          "description": "URL of main image (500x500)",
          "type": "string",
          "example": "https://assets.practable.io/images/penduino-500x500.png"
        },
        "long": {
          "description": "280 char additional description of the interface in plain text",
          "type": "string"
        },
        "name": {
          "description": "Display name",
          "type": "string",
          "example": "Penduino (basic)"
        },
        "short": {
          "description": "140 char max description of the interface in plain text",
          "type": "string",
          "example": "Interface to the penduino electromagnetic pendulum with variable drive, active braking, short and open circuit loading."
        },
        "thumb": {
          "description": "URL of thumbnail image (150x150)",
          "type": "string",
          "example": "https://assets.practable.io/images/penduino-150x150.png"
        },
        "type": {
          "description": "Type of resource being described, e.g. pool, activity, userinterface",
          "type": "string",
          "example": "userinterface"
        }
      },
      "example": {
        "further": "https://static.practable.io/descriptions/pools/penduino/index.html",
        "image": "https://assets.practable.io/images/pools/penduino/image.png",
        "long": "Some longer description",
        "name": "Penduino (basic)",
        "short": "Penduino electromagnetic pendulums with pulsed drive and braking",
        "thumb": "https://assets.practable.io/images/pools/penduino/thumb.png",
        "type": "pool"
      }
    },
    "DisplayGuide": {
      "type": "object",
      "required": [
        "book_ahead",
        "duration",
        "label",
        "max_slots"
      ],
      "properties": {
        "book_ahead": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "label": {
          "description": "what to display in the tab heading for these slots",
          "type": "string"
        },
        "max_slots": {
          "type": "integer"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Interval": {
      "type": "object",
      "properties": {
        "end": {
          "type": "string",
          "format": "date-time"
        },
        "start": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Intervals": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Interval"
      }
    },
    "Manifest": {
      "description": "Represents resources that can be booked",
      "type": "object",
      "title": "manifest",
      "required": [
        "descriptions",
        "policies",
        "resources",
        "slots",
        "streams",
        "uis",
        "ui_sets",
        "windows"
      ],
      "properties": {
        "descriptions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Description"
          }
        },
        "display_guides": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DisplayGuide"
          }
        },
        "policies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Policy"
          }
        },
        "resources": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Resource"
          }
        },
        "slots": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Slot"
          }
        },
        "streams": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ManifestStream"
          }
        },
        "ui_sets": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/UISet"
          }
        },
        "uis": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/UI"
          }
        },
        "windows": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Window"
          }
        }
      }
    },
    "ManifestStream": {
      "description": "represents a prototype stream as described in manifest",
      "type": "object",
      "title": "manifest stream",
      "required": [
        "connection_type",
        "for",
        "scopes",
        "topic",
        "url"
      ],
      "properties": {
        "connection_type": {
          "type": "string"
        },
        "for": {
          "description": "Describes the stream, and doubles as template key in the URL",
          "type": "string",
          "example": "video"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "topic": {
          "type": "string"
        },
        "url": {
          "description": "URL at which to obtain access to the stream (getting a redirect URL containing a one time code)",
          "type": "string",
          "example": "https://relay-access.practable.io/session/abc123"
        }
      }
    },
    "Policies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Policy"
      }
    },
    "PoliciesDescribed": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PolicyDescribed"
      }
    },
    "Policy": {
      "type": "object",
      "required": [
        "description",
        "slots"
      ],
      "properties": {
        "allow_start_in_past_within": {
          "type": "string"
        },
        "book_ahead": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "display_guides": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enforce_allow_start_in_past": {
          "type": "boolean"
        },
        "enforce_book_ahead": {
          "type": "boolean"
        },
        "enforce_grace_period": {
          "type": "boolean"
        },
        "enforce_max_bookings": {
          "type": "boolean"
        },
        "enforce_max_duration": {
          "type": "boolean"
        },
        "enforce_max_usage": {
          "type": "boolean"
        },
        "enforce_min_duration": {
          "type": "boolean"
        },
        "enforce_next_available": {
          "type": "boolean"
        },
        "enforce_starts_within": {
          "type": "boolean"
        },
        "enforce_unlimited_users": {
          "type": "boolean"
        },
        "grace_penalty": {
          "type": "string"
        },
        "grace_period": {
          "type": "string"
        },
        "max_bookings": {
          "type": "integer"
        },
        "max_duration": {
          "type": "string"
        },
        "max_usage": {
          "type": "string"
        },
        "min_duration": {
          "type": "string"
        },
        "next_available": {
          "type": "string"
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "starts_within": {
          "type": "string"
        }
      }
    },
    "PolicyDescribed": {
      "type": "object",
      "required": [
        "description",
        "slots"
      ],
      "properties": {
        "allow_start_in_past_within": {
          "type": "string"
        },
        "book_ahead": {
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/Description"
        },
        "display_guides": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DisplayGuide"
          }
        },
        "enforce_allow_start_in_past": {
          "type": "boolean"
        },
        "enforce_book_ahead": {
          "type": "boolean"
        },
        "enforce_grace_period": {
          "type": "boolean"
        },
        "enforce_max_bookings": {
          "type": "boolean"
        },
        "enforce_max_duration": {
          "type": "boolean"
        },
        "enforce_max_usage": {
          "type": "boolean"
        },
        "enforce_min_duration": {
          "type": "boolean"
        },
        "enforce_next_available": {
          "type": "boolean"
        },
        "enforce_starts_within": {
          "type": "boolean"
        },
        "enforce_unlimited_users": {
          "type": "boolean"
        },
        "grace_penalty": {
          "type": "string"
        },
        "grace_period": {
          "type": "string"
        },
        "max_bookings": {
          "type": "integer"
        },
        "max_duration": {
          "type": "string"
        },
        "max_usage": {
          "type": "string"
        },
        "min_duration": {
          "type": "string"
        },
        "next_available": {
          "type": "string"
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "starts_within": {
          "type": "string"
        }
      }
    },
    "PolicyStatus": {
      "type": "object",
      "required": [
        "current_bookings",
        "old_bookings",
        "usage"
      ],
      "properties": {
        "current_bookings": {
          "type": "integer"
        },
        "old_bookings": {
          "type": "integer"
        },
        "usage": {
          "type": "string"
        }
      }
    },
    "Resource": {
      "type": "object",
      "required": [
        "description",
        "streams",
        "topic_stub"
      ],
      "properties": {
        "config_url": {
          "type": "string",
          "format": "url"
        },
        "description": {
          "type": "string"
        },
        "streams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "topic_stub": {
          "type": "string"
        }
      }
    },
    "Slot": {
      "type": "object",
      "required": [
        "description",
        "policy",
        "resource",
        "ui_set",
        "window"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "policy": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "ui_set": {
          "type": "string"
        },
        "window": {
          "type": "string"
        }
      }
    },
    "SlotStatus": {
      "type": "object",
      "required": [
        "available",
        "reason"
      ],
      "properties": {
        "available": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "StoreStatusAdmin": {
      "type": "object",
      "required": [
        "locked",
        "message",
        "now",
        "bookings",
        "descriptions",
        "filters",
        "old_bookings",
        "policies",
        "resources",
        "slots",
        "streams",
        "uis",
        "ui_sets",
        "users",
        "windows"
      ],
      "properties": {
        "bookings": {
          "type": "integer"
        },
        "descriptions": {
          "type": "integer"
        },
        "filters": {
          "type": "integer"
        },
        "locked": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "now": {
          "type": "string",
          "format": "date-time"
        },
        "old_bookings": {
          "type": "integer"
        },
        "policies": {
          "type": "integer"
        },
        "resources": {
          "type": "integer"
        },
        "slots": {
          "type": "integer"
        },
        "streams": {
          "type": "integer"
        },
        "ui_sets": {
          "type": "integer"
        },
        "uis": {
          "type": "integer"
        },
        "users": {
          "type": "integer"
        },
        "windows": {
          "type": "integer"
        }
      }
    },
    "StoreStatusUser": {
      "type": "object",
      "required": [
        "locked",
        "message",
        "now"
      ],
      "properties": {
        "locked": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "now": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "UI": {
      "type": "object",
      "title": "User Interface",
      "required": [
        "url",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "streams_required": {
          "description": "list of names of required streams",
          "type": "array",
          "items": {
            "description": "stream name",
            "type": "string",
            "example": "video"
          },
          "example": [
            "data",
            "video"
          ]
        },
        "url": {
          "description": "template for the URL for the user interface",
          "type": "string",
          "example": "https://static.practable.io/ui/penduino-basic.html?video={{video}}\u0026data={{data}}"
        }
      }
    },
    "UIDescribed": {
      "type": "object",
      "title": "User Interface with description including",
      "required": [
        "url",
        "description"
      ],
      "properties": {
        "description": {
          "$ref": "#/definitions/Description"
        },
        "streams_required": {
          "description": "list of names of required streams",
          "type": "array",
          "items": {
            "description": "stream name",
            "type": "string",
            "example": "video"
          },
          "example": [
            "data",
            "video"
          ]
        },
        "url": {
          "description": "template for the URL for the user interface",
          "type": "string",
          "example": "https://static.practable.io/ui/penduino-basic.html?video={{video}}\u0026data={{data}}"
        }
      }
    },
    "UISet": {
      "type": "object",
      "title": "set of User Interfaces",
      "properties": {
        "UIs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "bookings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "old_bookings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "usage": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Users": {
      "type": "object",
      "title": "set of Users (export only)",
      "additionalProperties": {
        "$ref": "#/definitions/User"
      }
    },
    "Window": {
      "type": "object",
      "required": [
        "allowed"
      ],
      "properties": {
        "allowed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Interval"
          }
        },
        "denied": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Interval"
          }
        }
      }
    }
  },
  "responses": {
    "ErrorList": {
      "description": "list of errors",
      "schema": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "InternalError": {
      "description": "Internal Error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "The specified resource was not found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "for admins only",
      "name": "admin"
    },
    {
      "description": "for users",
      "name": "users"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "text/plain"
  ],
  "produces": [
    "application/json",
    "text/plain"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "User API for booking slots in advance",
    "title": "AdvanceBooking",
    "contact": {
      "name": "Tim Drysdale",
      "url": "https://practable.io",
      "email": "timothy.d.drysdale@gmail.com"
    },
    "version": "0.2"
  },
  "host": "book.practable.io",
  "basePath": "/api/v1",
  "paths": {
    "/admin/bookings": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Exports a copy of the current bookings, with sufficient information to allow editing and replacement. If successful produces JSON-formatted bookings list.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Export a copy of all current bookings",
        "operationId": "ExportBookings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Bookings"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes all current bookings, refunds usage to users, and then replaces with current bookings. Existing users are retained, new users are created as required to match bookings.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Replace current bookings",
        "operationId": "ReplaceBookings",
        "parameters": [
          {
            "name": "bookings",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bookings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreStatusAdmin"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/admin/manifest": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Export the manifest (resources, slots, policies, descriptions etc). Does not include bookings or users",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Export the manifest",
        "operationId": "ExportManifest",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Manifest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete the existing manifest and replace it with a new one. All items have specified names so bookings do not need updating (except perhaps you should if booked resources have been removed)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Replace the manifest",
        "operationId": "ReplaceManifest",
        "parameters": [
          {
            "name": "manifest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Manifest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreStatusAdmin"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/admin/manifest/check": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Check a manifest for errors. Returns 204 if OK or, if not, returns 500 with a list of error(s).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Check a manifest",
        "operationId": "CheckManifest",
        "parameters": [
          {
            "name": "manifest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Manifest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "InternalError",
            "schema": {
              "description": "list of errors",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          }
        }
      }
    },
    "/admin/oldbookings": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Exports a copy of the old bookings, with sufficient information to allow editing and replacement. If successful produces JSON-formatted bookings list.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Export a copy of all old bookings",
        "operationId": "ExportOldBookings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Bookings"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes all old bookings, and all users, then replaces both according to the bookings in the request, i.e. users and their usage are created as required to match bookings.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Replace old bookings",
        "operationId": "ReplaceOldBookings",
        "parameters": [
          {
            "name": "bookings",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bookings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreStatusAdmin"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/admin/slots/{slot_name}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Gets the availability of the underlying resource for the slot, including a status message. Indicates when equipment is offline temprorarily, e.g. due to failing an automated test.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get the availability of the slot",
        "operationId": "GetSlotIsAvailable",
        "parameters": [
          {
            "type": "string",
            "name": "slot_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SlotStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Sets the availability of the underlying resource for the slot, including a status message. Used to prevent users accessing equipment that should not be used, e.g. after failing an automated test, or make it available again after fixing it.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Set the availability of the slot",
        "operationId": "SetSlotIsAvailable",
        "parameters": [
          {
            "type": "string",
            "name": "slot_name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "name": "available",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "reason",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/admin/status": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Gets a count of the number of elements in the store, e.g. Bookings, Descriptions etc to facilitate a necessary but not sufficient check that replace manifest and replace bookings have produced the correct results.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get current store status",
        "operationId": "getStoreStatusAdmin",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreStatusAdmin"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Set whether the booking system is locked for users",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "set/release booking lock",
        "operationId": "setLock",
        "parameters": [
          {
            "type": "boolean",
            "description": "set booking lock",
            "name": "lock",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "set message of the day (use query so it can be seen in server logs)",
            "name": "msg",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreStatusAdmin"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/admin/users": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Export bookings and usage data for each user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Export users",
        "operationId": "ExportUsers",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/descriptions/{description_name}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get description",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get description",
        "operationId": "GetDescription",
        "parameters": [
          {
            "type": "string",
            "name": "description_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Description"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/login/{user_name}": {
      "post": {
        "description": "The access token is required to authenticate requests to the rest of the user-facing API. Ideally access to this endpoint should be secured by the identity management system. The access token has a limited lifetime but can be re-requested as needed. Consider rate-limiting this per-connection.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Request a user access token",
        "operationId": "GetAccessToken",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/policies/{policy_name}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get policy",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get policy",
        "operationId": "GetPolicy",
        "parameters": [
          {
            "type": "string",
            "name": "policy_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyDescribed"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/policies/{policy_name}/slots/{slot_name}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Pagination is supported by the limit and offset parameters. For the first query '?limit=20\u0026offset=0', the second '?limit=20\u0026offset=20'. The offset is equal to the zero-indexed value of the first item of the next page to be returned (20 items are indexed from 0 to 19, so 20 is the first item to be returned in the second page). Note that drift can occur if slots are booked during the sending of availability data, potentially preventing a user from seeing some slots that move earlier in the index and cross a pagination boundary. Users should refresh their results from 0 offset on a regular-ish basis if they wish to avoid this.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get availability for the slot under the policy",
        "operationId": "GetAvailability",
        "parameters": [
          {
            "type": "string",
            "name": "policy_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "slot_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Intervals"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "A booking is requested for a specific combination of policy-slot-user-from-to. Users should check availability first, and only make requests that are likely to be granted. If there is no current availability then requests will be denied. If there is availability, there is still a chance another user requests the same slot just before - whichever request is received by the server first will be allowed, the other denied. The user_name must match the user_name the user logged in with, that is in the authorisation token in the header.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Request a booking",
        "operationId": "MakeBooking",
        "parameters": [
          {
            "type": "string",
            "name": "policy_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "slot_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "user_name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "name": "to",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict - unavailable for the requested interval",
            "schema": {}
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/status": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Gets the current store status from a user perspective (e.g. is it locked? what is the reason?)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get current store status",
        "operationId": "getStoreStatusUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreStatusUser"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{user_name}/bookings": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all current bookings for the user. It's assumed that no pagination will be required due to likely policy limits being a couple of bookings per policy and users typically having only a couple of policies. No pagination may cause issues for admins that book hundreds or thousands slots on behalf of students, although it is likely such bookings would be automated so no need to support rapid update of a GUI, at least for now.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get all current bookings for the user",
        "operationId": "GetBookingsForUser",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Bookings"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{user_name}/bookings/{booking_name}": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Checks if the booking has started or not and if so, returns an activity that can be used to access the booked resource. Since this mutates the state of the booking (from unfulfilled to fulfilled) it is a put not a get.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Request the activity that goes with the booking",
        "operationId": "GetActivity",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "booking_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "For users to cancel their booking(s) on at a time. Checks if the booking is unstarted and/or unfulfilled, and cancels if so. A booking cannot be cancelled once an activity has been requested. A booking can be cancelled after it started, so long as it is unfulfilled (no activity requested). The user must be the owner of the booking to cancel it. Admins can cancel bookings by Lock() -\u003e ExportBookings() -\u003e edit -\u003e ReplaceBookings()-\u003e Unlock(). There is no need for an endpoint for admin single booking cancellation because the only visibility they have of bookings is via ExportBookings. Remaing time in the booking at time of cancellation is refunded to the user's usage tracker for that policy. That is intended to encourage early cancellation. Returns 404 on successful cancellation, or if there is no such booking.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Cancel the booking",
        "operationId": "CancelBooking",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "booking_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{user_name}/oldbookings": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all old bookings for the user. It's assumed that no pagination will be required due to likely policy limits including usage limits and users typically having only a couple of policies, although in practice pagination may be useful for heavy users.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get all old bookings for the user",
        "operationId": "GetOldBookingsForUser",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Bookings"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{user_name}/policies": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get all current policies for user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get all current policies for user",
        "operationId": "GetPoliciesForUser",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PoliciesDescribed"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{user_name}/policies/{policy_name}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get policy status for the user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Get policy status",
        "operationId": "GetPolicyStatusForUser",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "policy_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Add policy to the list of policies with which this user is allowed to make bookings",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Add policy to user account",
        "operationId": "AddPolicyForUser",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "policy_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessToken": {
      "description": "intended use is for users to access the API, and is tied to their user_name.",
      "type": "object",
      "title": "access token",
      "required": [
        "token",
        "nbf",
        "exp",
        "aud",
        "sub",
        "scopes"
      ],
      "properties": {
        "aud": {
          "description": "Audience",
          "type": "string"
        },
        "exp": {
          "description": "Expires At",
          "type": "number",
          "format": "unix-timestamp"
        },
        "iat": {
          "description": "Issued At",
          "type": "number",
          "format": "unix-timestamp"
        },
        "nbf": {
          "description": "Not before",
          "type": "number",
          "format": "unix-timestamp"
        },
        "scopes": {
          "description": "List of scopes",
          "type": "array",
          "items": {
            "type": "string",
            "example": "user:booking"
          }
        },
        "sub": {
          "description": "Subject",
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "Activity": {
      "description": "An activity represents connection details to instances of pre-agreed resource types such as video, data streams and user interfaces.",
      "type": "object",
      "title": "activity",
      "required": [
        "description",
        "exp",
        "nbf",
        "streams",
        "uis"
      ],
      "properties": {
        "config": {
          "description": "URL at which to GET the configuration object",
          "type": "string",
          "format": "url",
          "example": "https://assets.practable.io/config/experiments/pvna/pvna01-0.0.json"
        },
        "description": {
          "$ref": "#/definitions/Description"
        },
        "exp": {
          "description": "Expires At",
          "type": "number",
          "format": "unix-timestamp"
        },
        "nbf": {
          "description": "Expires At",
          "type": "number",
          "format": "unix-timestamp"
        },
        "streams": {
          "description": "A list of streams",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityStream"
          }
        },
        "uis": {
          "description": "User interfaces",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UIDescribed"
          }
        }
      }
    },
    "ActivityStream": {
      "description": "Represents an assigned, valid booking slot for an individual piece of equipment",
      "type": "object",
      "title": "stream",
      "required": [
        "audience",
        "connection_type",
        "for",
        "scopes",
        "topic",
        "url"
      ],
      "properties": {
        "audience": {
          "type": "string"
        },
        "connection_type": {
          "type": "string"
        },
        "for": {
          "description": "Describes the stream, and doubles as template key in the URL",
          "type": "string",
          "example": "video"
        },
        "prefix": {
          "description": "prefix of the relay routing",
          "type": "string",
          "example": "session"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "token": {
          "description": "signed jwt token for accessing the stream",
          "type": "string"
        },
        "topic": {
          "type": "string"
        },
        "url": {
          "description": "URL at which to obtain access to the stream (getting a redirect URL containing a one time code)",
          "type": "string",
          "example": "https://relay-access.practable.io/session/abc123"
        }
      },
      "example": {
        "for": "video",
        "token": "ey....",
        "url": "https://relay-access.practable.io/session/abc123"
      }
    },
    "Booking": {
      "description": "A booking represents a promise to supply an activity. The booleans are not required because we don't process the booking status when loading old bookings (all old bookings are assumed to have been good bookings)",
      "type": "object",
      "title": "booking",
      "required": [
        "name",
        "policy",
        "slot",
        "user",
        "when"
      ],
      "properties": {
        "cancelled": {
          "description": "Has the booking been cancelled?",
          "type": "boolean"
        },
        "cancelled_at": {
          "description": "time the booking was cancelled",
          "type": "string",
          "format": "date-time"
        },
        "cancelled_by": {
          "description": "who cancelled the booking, e.g. auto-grace-expired, admin or user",
          "type": "string",
          "example": "auto-grace-expired"
        },
        "name": {
          "description": "unique name of the booking",
          "type": "string"
        },
        "policy": {
          "description": "policy under which the booking was made",
          "type": "string"
        },
        "slot": {
          "description": "name of the slot that has been booked",
          "type": "string"
        },
        "started": {
          "description": "has the booking been started by the user?",
          "type": "boolean"
        },
        "started_at": {
          "description": "time the booking was first started by the user",
          "type": "string",
          "format": "date-time"
        },
        "unfulfilled": {
          "description": "was the resource unavailable",
          "type": "boolean"
        },
        "usage_charged": {
          "description": "how much usage was actually charged for this booking",
          "type": "string"
        },
        "user": {
          "description": "name of the user who made the booking",
          "type": "string"
        },
        "when": {
          "$ref": "#/definitions/Interval"
        }
      }
    },
    "Bookings": {
      "description": "list of bookings",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Booking"
      }
    },
    "Description": {
      "description": "Description of a resource e.g. policy, slot, user interface",
      "type": "object",
      "title": "description",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "further": {
          "description": "URL for further information",
          "type": "string",
          "example": "https://static.practable.io/info/penduino/ui.html"
        },
        "image": {
          "description": "URL of main image (500x500)",
          "type": "string",
          "example": "https://assets.practable.io/images/penduino-500x500.png"
        },
        "long": {
          "description": "280 char additional description of the interface in plain text",
          "type": "string"
        },
        "name": {
          "description": "Display name",
          "type": "string",
          "example": "Penduino (basic)"
        },
        "short": {
          "description": "140 char max description of the interface in plain text",
          "type": "string",
          "example": "Interface to the penduino electromagnetic pendulum with variable drive, active braking, short and open circuit loading."
        },
        "thumb": {
          "description": "URL of thumbnail image (150x150)",
          "type": "string",
          "example": "https://assets.practable.io/images/penduino-150x150.png"
        },
        "type": {
          "description": "Type of resource being described, e.g. pool, activity, userinterface",
          "type": "string",
          "example": "userinterface"
        }
      },
      "example": {
        "further": "https://static.practable.io/descriptions/pools/penduino/index.html",
        "image": "https://assets.practable.io/images/pools/penduino/image.png",
        "long": "Some longer description",
        "name": "Penduino (basic)",
        "short": "Penduino electromagnetic pendulums with pulsed drive and braking",
        "thumb": "https://assets.practable.io/images/pools/penduino/thumb.png",
        "type": "pool"
      }
    },
    "DisplayGuide": {
      "type": "object",
      "required": [
        "book_ahead",
        "duration",
        "label",
        "max_slots"
      ],
      "properties": {
        "book_ahead": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "label": {
          "description": "what to display in the tab heading for these slots",
          "type": "string"
        },
        "max_slots": {
          "type": "integer"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Interval": {
      "type": "object",
      "properties": {
        "end": {
          "type": "string",
          "format": "date-time"
        },
        "start": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Intervals": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Interval"
      }
    },
    "Manifest": {
      "description": "Represents resources that can be booked",
      "type": "object",
      "title": "manifest",
      "required": [
        "descriptions",
        "policies",
        "resources",
        "slots",
        "streams",
        "uis",
        "ui_sets",
        "windows"
      ],
      "properties": {
        "descriptions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Description"
          }
        },
        "display_guides": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DisplayGuide"
          }
        },
        "policies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Policy"
          }
        },
        "resources": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Resource"
          }
        },
        "slots": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Slot"
          }
        },
        "streams": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ManifestStream"
          }
        },
        "ui_sets": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/UISet"
          }
        },
        "uis": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/UI"
          }
        },
        "windows": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Window"
          }
        }
      }
    },
    "ManifestStream": {
      "description": "represents a prototype stream as described in manifest",
      "type": "object",
      "title": "manifest stream",
      "required": [
        "connection_type",
        "for",
        "scopes",
        "topic",
        "url"
      ],
      "properties": {
        "connection_type": {
          "type": "string"
        },
        "for": {
          "description": "Describes the stream, and doubles as template key in the URL",
          "type": "string",
          "example": "video"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "topic": {
          "type": "string"
        },
        "url": {
          "description": "URL at which to obtain access to the stream (getting a redirect URL containing a one time code)",
          "type": "string",
          "example": "https://relay-access.practable.io/session/abc123"
        }
      }
    },
    "Policies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Policy"
      }
    },
    "PoliciesDescribed": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PolicyDescribed"
      }
    },
    "Policy": {
      "type": "object",
      "required": [
        "description",
        "slots"
      ],
      "properties": {
        "allow_start_in_past_within": {
          "type": "string"
        },
        "book_ahead": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "display_guides": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enforce_allow_start_in_past": {
          "type": "boolean"
        },
        "enforce_book_ahead": {
          "type": "boolean"
        },
        "enforce_grace_period": {
          "type": "boolean"
        },
        "enforce_max_bookings": {
          "type": "boolean"
        },
        "enforce_max_duration": {
          "type": "boolean"
        },
        "enforce_max_usage": {
          "type": "boolean"
        },
        "enforce_min_duration": {
          "type": "boolean"
        },
        "enforce_next_available": {
          "type": "boolean"
        },
        "enforce_starts_within": {
          "type": "boolean"
        },
        "enforce_unlimited_users": {
          "type": "boolean"
        },
        "grace_penalty": {
          "type": "string"
        },
        "grace_period": {
          "type": "string"
        },
        "max_bookings": {
          "type": "integer"
        },
        "max_duration": {
          "type": "string"
        },
        "max_usage": {
          "type": "string"
        },
        "min_duration": {
          "type": "string"
        },
        "next_available": {
          "type": "string"
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "starts_within": {
          "type": "string"
        }
      }
    },
    "PolicyDescribed": {
      "type": "object",
      "required": [
        "description",
        "slots"
      ],
      "properties": {
        "allow_start_in_past_within": {
          "type": "string"
        },
        "book_ahead": {
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/Description"
        },
        "display_guides": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DisplayGuide"
          }
        },
        "enforce_allow_start_in_past": {
          "type": "boolean"
        },
        "enforce_book_ahead": {
          "type": "boolean"
        },
        "enforce_grace_period": {
          "type": "boolean"
        },
        "enforce_max_bookings": {
          "type": "boolean"
        },
        "enforce_max_duration": {
          "type": "boolean"
        },
        "enforce_max_usage": {
          "type": "boolean"
        },
        "enforce_min_duration": {
          "type": "boolean"
        },
        "enforce_next_available": {
          "type": "boolean"
        },
        "enforce_starts_within": {
          "type": "boolean"
        },
        "enforce_unlimited_users": {
          "type": "boolean"
        },
        "grace_penalty": {
          "type": "string"
        },
        "grace_period": {
          "type": "string"
        },
        "max_bookings": {
          "type": "integer"
        },
        "max_duration": {
          "type": "string"
        },
        "max_usage": {
          "type": "string"
        },
        "min_duration": {
          "type": "string"
        },
        "next_available": {
          "type": "string"
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "starts_within": {
          "type": "string"
        }
      }
    },
    "PolicyStatus": {
      "type": "object",
      "required": [
        "current_bookings",
        "old_bookings",
        "usage"
      ],
      "properties": {
        "current_bookings": {
          "type": "integer"
        },
        "old_bookings": {
          "type": "integer"
        },
        "usage": {
          "type": "string"
        }
      }
    },
    "Resource": {
      "type": "object",
      "required": [
        "description",
        "streams",
        "topic_stub"
      ],
      "properties": {
        "config_url": {
          "type": "string",
          "format": "url"
        },
        "description": {
          "type": "string"
        },
        "streams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "topic_stub": {
          "type": "string"
        }
      }
    },
    "Slot": {
      "type": "object",
      "required": [
        "description",
        "policy",
        "resource",
        "ui_set",
        "window"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "policy": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "ui_set": {
          "type": "string"
        },
        "window": {
          "type": "string"
        }
      }
    },
    "SlotStatus": {
      "type": "object",
      "required": [
        "available",
        "reason"
      ],
      "properties": {
        "available": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "StoreStatusAdmin": {
      "type": "object",
      "required": [
        "locked",
        "message",
        "now",
        "bookings",
        "descriptions",
        "filters",
        "old_bookings",
        "policies",
        "resources",
        "slots",
        "streams",
        "uis",
        "ui_sets",
        "users",
        "windows"
      ],
      "properties": {
        "bookings": {
          "type": "integer"
        },
        "descriptions": {
          "type": "integer"
        },
        "filters": {
          "type": "integer"
        },
        "locked": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "now": {
          "type": "string",
          "format": "date-time"
        },
        "old_bookings": {
          "type": "integer"
        },
        "policies": {
          "type": "integer"
        },
        "resources": {
          "type": "integer"
        },
        "slots": {
          "type": "integer"
        },
        "streams": {
          "type": "integer"
        },
        "ui_sets": {
          "type": "integer"
        },
        "uis": {
          "type": "integer"
        },
        "users": {
          "type": "integer"
        },
        "windows": {
          "type": "integer"
        }
      }
    },
    "StoreStatusUser": {
      "type": "object",
      "required": [
        "locked",
        "message",
        "now"
      ],
      "properties": {
        "locked": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "now": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "UI": {
      "type": "object",
      "title": "User Interface",
      "required": [
        "url",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "streams_required": {
          "description": "list of names of required streams",
          "type": "array",
          "items": {
            "description": "stream name",
            "type": "string",
            "example": "video"
          },
          "example": [
            "data",
            "video"
          ]
        },
        "url": {
          "description": "template for the URL for the user interface",
          "type": "string",
          "example": "https://static.practable.io/ui/penduino-basic.html?video={{video}}\u0026data={{data}}"
        }
      }
    },
    "UIDescribed": {
      "type": "object",
      "title": "User Interface with description including",
      "required": [
        "url",
        "description"
      ],
      "properties": {
        "description": {
          "$ref": "#/definitions/Description"
        },
        "streams_required": {
          "description": "list of names of required streams",
          "type": "array",
          "items": {
            "description": "stream name",
            "type": "string",
            "example": "video"
          },
          "example": [
            "data",
            "video"
          ]
        },
        "url": {
          "description": "template for the URL for the user interface",
          "type": "string",
          "example": "https://static.practable.io/ui/penduino-basic.html?video={{video}}\u0026data={{data}}"
        }
      }
    },
    "UISet": {
      "type": "object",
      "title": "set of User Interfaces",
      "properties": {
        "UIs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "bookings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "old_bookings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "usage": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Users": {
      "type": "object",
      "title": "set of Users (export only)",
      "additionalProperties": {
        "$ref": "#/definitions/User"
      }
    },
    "Window": {
      "type": "object",
      "required": [
        "allowed"
      ],
      "properties": {
        "allowed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Interval"
          }
        },
        "denied": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Interval"
          }
        }
      }
    }
  },
  "responses": {
    "ErrorList": {
      "description": "list of errors",
      "schema": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "InternalError": {
      "description": "Internal Error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "The specified resource was not found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "for admins only",
      "name": "admin"
    },
    {
      "description": "for users",
      "name": "users"
    }
  ]
}`))
}
