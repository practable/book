// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyDescribed policy described
//
// swagger:model PolicyDescribed
type PolicyDescribed struct {

	// allow start in past within
	AllowStartInPastWithin string `json:"allow_start_in_past_within,omitempty"`

	// book ahead
	BookAhead string `json:"book_ahead,omitempty"`

	// description
	// Required: true
	Description *Description `json:"description"`

	// display guides
	DisplayGuides map[string]DisplayGuide `json:"display_guides,omitempty"`

	// enforce allow start in past
	EnforceAllowStartInPast bool `json:"enforce_allow_start_in_past,omitempty"`

	// enforce book ahead
	EnforceBookAhead bool `json:"enforce_book_ahead,omitempty"`

	// enforce grace period
	EnforceGracePeriod bool `json:"enforce_grace_period,omitempty"`

	// enforce max bookings
	EnforceMaxBookings bool `json:"enforce_max_bookings,omitempty"`

	// enforce max duration
	EnforceMaxDuration bool `json:"enforce_max_duration,omitempty"`

	// enforce max usage
	EnforceMaxUsage bool `json:"enforce_max_usage,omitempty"`

	// enforce min duration
	EnforceMinDuration bool `json:"enforce_min_duration,omitempty"`

	// enforce next available
	EnforceNextAvailable bool `json:"enforce_next_available,omitempty"`

	// enforce starts within
	EnforceStartsWithin bool `json:"enforce_starts_within,omitempty"`

	// enforce unlimited users
	EnforceUnlimitedUsers bool `json:"enforce_unlimited_users,omitempty"`

	// grace penalty
	GracePenalty string `json:"grace_penalty,omitempty"`

	// grace period
	GracePeriod string `json:"grace_period,omitempty"`

	// max bookings
	MaxBookings int64 `json:"max_bookings,omitempty"`

	// max duration
	MaxDuration string `json:"max_duration,omitempty"`

	// max usage
	MaxUsage string `json:"max_usage,omitempty"`

	// min duration
	MinDuration string `json:"min_duration,omitempty"`

	// next available
	NextAvailable string `json:"next_available,omitempty"`

	// slots
	// Required: true
	Slots []string `json:"slots"`

	// starts within
	StartsWithin string `json:"starts_within,omitempty"`
}

// Validate validates this policy described
func (m *PolicyDescribed) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayGuides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyDescribed) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyDescribed) validateDisplayGuides(formats strfmt.Registry) error {
	if swag.IsZero(m.DisplayGuides) { // not required
		return nil
	}

	for k := range m.DisplayGuides {

		if err := validate.Required("display_guides"+"."+k, "body", m.DisplayGuides[k]); err != nil {
			return err
		}
		if val, ok := m.DisplayGuides[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("display_guides" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("display_guides" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDescribed) validateSlots(formats strfmt.Registry) error {

	if err := validate.Required("slots", "body", m.Slots); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this policy described based on the context it is used
func (m *PolicyDescribed) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplayGuides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyDescribed) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyDescribed) contextValidateDisplayGuides(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.DisplayGuides {

		if val, ok := m.DisplayGuides[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyDescribed) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyDescribed) UnmarshalBinary(b []byte) error {
	var res PolicyDescribed
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
