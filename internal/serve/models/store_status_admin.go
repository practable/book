// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoreStatusAdmin store status admin
//
// swagger:model StoreStatusAdmin
type StoreStatusAdmin struct {

	// bookings
	// Required: true
	Bookings *int64 `json:"bookings"`

	// descriptions
	// Required: true
	Descriptions *int64 `json:"descriptions"`

	// filters
	// Required: true
	Filters *int64 `json:"filters"`

	// locked
	// Required: true
	Locked *bool `json:"locked"`

	// message
	// Required: true
	Message *string `json:"message"`

	// now
	// Required: true
	// Format: date-time
	Now *strfmt.DateTime `json:"now"`

	// old ookings
	// Required: true
	OldOokings *int64 `json:"old_ookings"`

	// policies
	// Required: true
	Policies *int64 `json:"policies"`

	// resources
	// Required: true
	Resources *int64 `json:"resources"`

	// slots
	// Required: true
	Slots *int64 `json:"slots"`

	// streams
	// Required: true
	Streams *int64 `json:"streams"`

	// ui sets
	// Required: true
	UISets *int64 `json:"ui_sets"`

	// uis
	// Required: true
	Uis *int64 `json:"uis"`

	// users
	// Required: true
	Users *int64 `json:"users"`

	// windows
	// Required: true
	Windows *int64 `json:"windows"`
}

// Validate validates this store status admin
func (m *StoreStatusAdmin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBookings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOldOokings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUISets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWindows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoreStatusAdmin) validateBookings(formats strfmt.Registry) error {

	if err := validate.Required("bookings", "body", m.Bookings); err != nil {
		return err
	}

	return nil
}

func (m *StoreStatusAdmin) validateDescriptions(formats strfmt.Registry) error {

	if err := validate.Required("descriptions", "body", m.Descriptions); err != nil {
		return err
	}

	return nil
}

func (m *StoreStatusAdmin) validateFilters(formats strfmt.Registry) error {

	if err := validate.Required("filters", "body", m.Filters); err != nil {
		return err
	}

	return nil
}

func (m *StoreStatusAdmin) validateLocked(formats strfmt.Registry) error {

	if err := validate.Required("locked", "body", m.Locked); err != nil {
		return err
	}

	return nil
}

func (m *StoreStatusAdmin) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *StoreStatusAdmin) validateNow(formats strfmt.Registry) error {

	if err := validate.Required("now", "body", m.Now); err != nil {
		return err
	}

	if err := validate.FormatOf("now", "body", "date-time", m.Now.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StoreStatusAdmin) validateOldOokings(formats strfmt.Registry) error {

	if err := validate.Required("old_ookings", "body", m.OldOokings); err != nil {
		return err
	}

	return nil
}

func (m *StoreStatusAdmin) validatePolicies(formats strfmt.Registry) error {

	if err := validate.Required("policies", "body", m.Policies); err != nil {
		return err
	}

	return nil
}

func (m *StoreStatusAdmin) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	return nil
}

func (m *StoreStatusAdmin) validateSlots(formats strfmt.Registry) error {

	if err := validate.Required("slots", "body", m.Slots); err != nil {
		return err
	}

	return nil
}

func (m *StoreStatusAdmin) validateStreams(formats strfmt.Registry) error {

	if err := validate.Required("streams", "body", m.Streams); err != nil {
		return err
	}

	return nil
}

func (m *StoreStatusAdmin) validateUISets(formats strfmt.Registry) error {

	if err := validate.Required("ui_sets", "body", m.UISets); err != nil {
		return err
	}

	return nil
}

func (m *StoreStatusAdmin) validateUis(formats strfmt.Registry) error {

	if err := validate.Required("uis", "body", m.Uis); err != nil {
		return err
	}

	return nil
}

func (m *StoreStatusAdmin) validateUsers(formats strfmt.Registry) error {

	if err := validate.Required("users", "body", m.Users); err != nil {
		return err
	}

	return nil
}

func (m *StoreStatusAdmin) validateWindows(formats strfmt.Registry) error {

	if err := validate.Required("windows", "body", m.Windows); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this store status admin based on context it is used
func (m *StoreStatusAdmin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StoreStatusAdmin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoreStatusAdmin) UnmarshalBinary(b []byte) error {
	var res StoreStatusAdmin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
