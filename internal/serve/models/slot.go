// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Slot slot
//
// swagger:model Slot
type Slot struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// policy
	// Required: true
	Policy *string `json:"policy"`

	// resource
	// Required: true
	Resource *string `json:"resource"`

	// ui set
	// Required: true
	UISet *string `json:"ui_set"`

	// window
	// Required: true
	Window *string `json:"window"`
}

// Validate validates this slot
func (m *Slot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUISet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWindow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Slot) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Slot) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", m.Policy); err != nil {
		return err
	}

	return nil
}

func (m *Slot) validateResource(formats strfmt.Registry) error {

	if err := validate.Required("resource", "body", m.Resource); err != nil {
		return err
	}

	return nil
}

func (m *Slot) validateUISet(formats strfmt.Registry) error {

	if err := validate.Required("ui_set", "body", m.UISet); err != nil {
		return err
	}

	return nil
}

func (m *Slot) validateWindow(formats strfmt.Registry) error {

	if err := validate.Required("window", "body", m.Window); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this slot based on context it is used
func (m *Slot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Slot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Slot) UnmarshalBinary(b []byte) error {
	var res Slot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
