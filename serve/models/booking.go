// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Booking booking
//
// A booking represents a promise to supply an activity. The booleans are not required because we don't process the booking status when loading old bookings (all old bookings are assumed to have been good bookings)
//
// swagger:model Booking
type Booking struct {

	// Has the booking been cancelled?
	Cancelled bool `json:"cancelled,omitempty"`

	// unique name of the booking
	// Required: true
	Name *string `json:"name"`

	// policy under which the booking was made
	// Required: true
	Policy *string `json:"policy"`

	// name of the slot that has been booked
	// Required: true
	Slot *string `json:"slot"`

	// has the booking been started by the user?
	Started bool `json:"started,omitempty"`

	// was the resource unavailable
	Unfulfilled bool `json:"unfulfilled,omitempty"`

	// name of the user who made the booking
	// Required: true
	User *string `json:"user"`

	// when
	// Required: true
	When *Interval `json:"when"`
}

// Validate validates this booking
func (m *Booking) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Booking) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Booking) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", m.Policy); err != nil {
		return err
	}

	return nil
}

func (m *Booking) validateSlot(formats strfmt.Registry) error {

	if err := validate.Required("slot", "body", m.Slot); err != nil {
		return err
	}

	return nil
}

func (m *Booking) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

func (m *Booking) validateWhen(formats strfmt.Registry) error {

	if err := validate.Required("when", "body", m.When); err != nil {
		return err
	}

	if m.When != nil {
		if err := m.When.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("when")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("when")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this booking based on the context it is used
func (m *Booking) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWhen(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Booking) contextValidateWhen(ctx context.Context, formats strfmt.Registry) error {

	if m.When != nil {
		if err := m.When.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("when")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("when")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Booking) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Booking) UnmarshalBinary(b []byte) error {
	var res Booking
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
