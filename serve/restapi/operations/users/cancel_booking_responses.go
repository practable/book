// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/timdrysdale/interval/serve/models"
)

// CancelBookingUnauthorizedCode is the HTTP code returned for type CancelBookingUnauthorized
const CancelBookingUnauthorizedCode int = 401

/*CancelBookingUnauthorized Unauthorized

swagger:response cancelBookingUnauthorized
*/
type CancelBookingUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCancelBookingUnauthorized creates CancelBookingUnauthorized with default headers values
func NewCancelBookingUnauthorized() *CancelBookingUnauthorized {

	return &CancelBookingUnauthorized{}
}

// WithPayload adds the payload to the cancel booking unauthorized response
func (o *CancelBookingUnauthorized) WithPayload(payload *models.Error) *CancelBookingUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cancel booking unauthorized response
func (o *CancelBookingUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CancelBookingUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CancelBookingNotFoundCode is the HTTP code returned for type CancelBookingNotFound
const CancelBookingNotFoundCode int = 404

/*CancelBookingNotFound The specified resource was not found

swagger:response cancelBookingNotFound
*/
type CancelBookingNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCancelBookingNotFound creates CancelBookingNotFound with default headers values
func NewCancelBookingNotFound() *CancelBookingNotFound {

	return &CancelBookingNotFound{}
}

// WithPayload adds the payload to the cancel booking not found response
func (o *CancelBookingNotFound) WithPayload(payload *models.Error) *CancelBookingNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cancel booking not found response
func (o *CancelBookingNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CancelBookingNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CancelBookingInternalServerErrorCode is the HTTP code returned for type CancelBookingInternalServerError
const CancelBookingInternalServerErrorCode int = 500

/*CancelBookingInternalServerError Internal Error

swagger:response cancelBookingInternalServerError
*/
type CancelBookingInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCancelBookingInternalServerError creates CancelBookingInternalServerError with default headers values
func NewCancelBookingInternalServerError() *CancelBookingInternalServerError {

	return &CancelBookingInternalServerError{}
}

// WithPayload adds the payload to the cancel booking internal server error response
func (o *CancelBookingInternalServerError) WithPayload(payload *models.Error) *CancelBookingInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cancel booking internal server error response
func (o *CancelBookingInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CancelBookingInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
