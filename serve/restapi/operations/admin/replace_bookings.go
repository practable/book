// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReplaceBookingsHandlerFunc turns a function with the right signature into a replace bookings handler
type ReplaceBookingsHandlerFunc func(ReplaceBookingsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplaceBookingsHandlerFunc) Handle(params ReplaceBookingsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ReplaceBookingsHandler interface for that can handle valid replace bookings params
type ReplaceBookingsHandler interface {
	Handle(ReplaceBookingsParams, interface{}) middleware.Responder
}

// NewReplaceBookings creates a new http.Handler for the replace bookings operation
func NewReplaceBookings(ctx *middleware.Context, handler ReplaceBookingsHandler) *ReplaceBookings {
	return &ReplaceBookings{Context: ctx, Handler: handler}
}

/* ReplaceBookings swagger:route PUT /admin/bookings admin bookings replaceBookings

Replace current bookings

Deletes all current bookings, refunds usage to users, and then replaces with current bookings. Existing users are retained, new users are created as required to match bookings.

*/
type ReplaceBookings struct {
	Context *middleware.Context
	Handler ReplaceBookingsHandler
}

func (o *ReplaceBookings) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewReplaceBookingsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
